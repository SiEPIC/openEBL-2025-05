name: Post-layout simulation verification


# Runs if the layout functional verification passes
# Runs a circuit simulation, and returns the results

on:
  workflow_run:
    workflows: ["Run Layout Verification"]
    types:
      - completed

jobs:
  secure-sim:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout triggering commit
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Fetch base branch
        run: |
          git fetch origin main --no-tags --prune --unshallow

      - name: Setup GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Get PR number from branch
        id: getpr
        run: |
          echo "Finding PR and username for branch: ${{ github.event.workflow_run.head_branch }}"
          PR_JSON=$(gh pr list --state open --json number,author -L 1 --search "head:${{ github.event.workflow_run.head_branch }}")
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.[0].number')
          USERNAME=$(echo "$PR_JSON" | jq -r '.[0].author.login')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
          echo "Found username: $USERNAME"
          echo "Found PR #: $PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Detect layout files
        id: check_files
        run: |
          USERNAME="${{ steps.getpr.outputs.username }}"
          echo "Detected GitHub username: $USERNAME"

          FILES=$(git diff --name-only origin/main...HEAD | grep -i -E '\.(gds|oas)$' | sed 's|^submissions/||'  || true)

          if [ -z "$FILES" ]; then
            echo "No .gds or .oas files in submissions/"
            echo "found=false" >> $GITHUB_OUTPUT
          else
            echo "$FILES"
            echo "$FILES" > files_to_copy.txt
            echo "found=true" >> $GITHUB_OUTPUT
          fi


      - name: Setup SSH
        if: steps.check_files.outputs.found == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keygen -l -f ~/.ssh/id_ed25519 || echo "Invalid SSH key"

          # Write SSH config with ProxyJump
          cat <<EOF > ~/.ssh/config
          Host turing
            HostName turing.phas.ubc.ca
            User lukasc
            Port 7743
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null

          Host baker
            User lukasc
            ProxyJump turing
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          chmod 600 ~/.ssh/config

      - name: Copy .py files to Baker
        if: steps.check_files.outputs.found == 'true'
        run: |

          echo "Simulating for PR 
          echo "simulation files:"
          cat files_to_copy.txt

          USERNAME="${{ steps.getpr.outputs.username }}"
          ssh baker "mkdir -p ~/simulations/$USERNAME"

          while IFS= read -r file; do
            echo "Copying $file to baker:~/simulations/$USERNAME/"
            scp "$file" baker:~/simulations/$USERNAME/
            if [ $? -ne 0 ]; then
              echo "‚ùå Failed to copy $file"
              exit 1
            fi
          done < files_to_copy.txt


      - name: Run simulation and fetch results
        if: steps.check_files.outputs.found == 'true'
        run: |
          USERNAME="${{ steps.getpr.outputs.username }}"
          PR_NUMBER="${{ steps.getpr.outputs.pr_number }}"
          FILE_LIST=$(<files_to_copy.txt)

          echo "Running remote simulation for $USERNAME"

          for file in $FILE_LIST; do
            FILE_BASENAME=$(basename "$file")
            FILE_REMOTE="~/simulations/$USERNAME/$FILE_BASENAME"
            REMOTE_DIR="~/simulations/$USERNAME"
            
            echo "Starting simulation on Baker for $FILE_BASENAME"

            ssh baker "cd simulations && python3 run_circuit_simulation.py $USERNAME/$FILE_BASENAME" \
              > sim_stdout.txt 2> sim_stderr.txt

            echo "Fetching new output files from Baker..."
            rsync -avz --ignore-existing --update baker:simulations/$USERNAME/ ./output/

            echo "Formatting comment..."
            echo "This is an experimental feature: " > comment.txt
            echo "‚úÖ Simulation results for \`$FILE_BASENAME\`" > comment.txt
            echo "" >> comment.txt

            if [ -s sim_stdout.txt ]; then
              echo "**stdout:**" >> comment.txt
              echo '```' >> comment.txt
              cat sim_stdout.txt >> comment.txt
              echo '```' >> comment.txt
              echo "" >> comment.txt
            fi

            if [ -s sim_stderr.txt ]; then
              echo "**stderr:**" >> comment.txt
              echo '```' >> comment.txt
              cat sim_stderr.txt >> comment.txt
              echo '```' >> comment.txt
              echo "" >> comment.txt
            fi

            echo "Looking for PNGs to embed..."
            for png in output/*.png; do
              [ -e "$png" ] || continue
              echo "![Result Image]($(basename "$png"))" >> comment.txt
              echo "" >> comment.txt
            done
          done

      - name: Push result PNGs to `sim-images` branch
        if: steps.check_files.outputs.found == 'true'
        run: |
          PR_NUMBER="${{ steps.getpr.outputs.pr_number }}"
          USERNAME="${{ steps.getpr.outputs.username }}"

          echo "Creating image folder for PR #$PR_NUMBER..."
          mkdir -p images/pr-${PR_NUMBER}
          cp output/*.png images/pr-${PR_NUMBER}/ || echo "No PNGs found"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git fetch origin
          git checkout -B sim-images origin/sim-images || git checkout --orphan sim-images
          git pull origin sim-images || true

          cp -r images/pr-${PR_NUMBER} images/
          git add images/pr-${PR_NUMBER}
          git commit -m "Add simulation images for PR #$PR_NUMBER" || echo "No changes to commit"
          git push origin sim-images
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Append PNG links to comment
        if: steps.check_files.outputs.found == 'true'
        run: |
          echo "üì∏ Simulation result image(s):" >> comment.txt
          for img in images/pr-${{ steps.getpr.outputs.pr_number }}/*.png; do
            [ -f "$img" ] || continue
            FILENAME=$(basename "$img")
            echo "![${FILENAME}](https://raw.githubusercontent.com/${{ github.repository }}/sim-images/images/pr-${{ steps.getpr.outputs.pr_number }}/${FILENAME})" >> comment.txt
          done

      - name: Post simulation results as PR comment
        if: steps.check_files.outputs.found == 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository }}
          issue-number: ${{ steps.getpr.outputs.pr_number }}
          body-path: comment.txt
          
